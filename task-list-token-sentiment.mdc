# Task List: Token Sentiment Telegram Bot

## Task 1: Project Setup & Repository Initialization - Complexity: Medium
**Description:** Establish the foundational project structure, dependency management, and development environment.

### Subtasks:
- [x] **1.1** Create Python virtual environment & initialize Git repository ✅ - Complexity: Low
- [x] **1.2** Define project directory layout (`bot/`, `core/`, `tests/`) ✅ - Complexity: Low
- [x] **1.3** Create `requirements.txt` with pinned dependencies (`python-telegram-bot`, `httpx`, `redis`, `pydantic`, `pytest`, `flake8`, etc.) ✅ - Complexity: Low
- [x] **1.4** Configure pre-commit hooks (black, flake8) ✅ - Complexity: Low
- [x] **1.5** Set up CI pipeline (GitHub Actions) running `pytest` & `flake8` on push ✅ - Complexity: Medium

**Dependencies:** None
**Estimated Time:** 6 hours
**Files to Create/Modify:** `.gitignore`, `requirements.txt`, `.pre-commit-config.yaml`, `.github/workflows/ci.yml`, directory scaffolding

---

## Task 2: Infrastructure & Deployment Foundation - Complexity: Low
**Description:** Prepare MVP deployment with free hosting options and in-memory caching.

### Subtasks:
- [x] **2.1** Write `Dockerfile` for stateless Python service ✅ - Complexity: Low
- [x] **2.2** Create free deployment guides (Railway, Render, local) ✅ - Complexity: Low
- [x] **2.3** Implement in-memory caching fallback for Redis ✅ - Complexity: Medium
- [x] **2.4** Create environment configuration examples ✅ - Complexity: Low

**Dependencies:** Task 1
**Estimated Time:** 6 hours
**Files to Create/Modify:** `Dockerfile`, `DEPLOYMENT.md`, `env.example`, `core/cache.py`, `README.md`

---

## Task 3: Data Source Wrappers (`core/data_sources.py`) - Complexity: High
**Description:** Implement asynchronous wrappers for Nansen, Twitter, and CoinGecko/CMC APIs with rate-limit handling and caching hooks.

### Subtasks:
- [x] **3.1** Implement Twitter sentiment fetcher (async search + sentiment scoring) ✅ - Complexity: High
- [x] **3.2** Implement Nansen on-chain smart-money flow fetcher ✅ - Complexity: High
- [x] **3.3** Implement CoinGecko/CMC token metadata fetcher ✅ - Complexity: Medium
- [x] **3.4** Centralize error handling & retries with exponential backoff ✅ - Complexity: Medium
- [x] **3.5** Integrate Redis caching layer (5-min TTL) for each API endpoint ✅ - Complexity: Medium

**Dependencies:** Tasks 1, 2
**Estimated Time:** 16 hours
**Files to Create/Modify:** `core/data_sources.py`, `core/cache.py`, `tests/test_data_sources.py`

---

## Task 4: Sentiment Analysis Engine (`core/sentiment_engine.py`) - Complexity: High
**Description:** Aggregate pillar data, apply weighting (60/25/15), normalize scores, compute confidence, and map to Bullish/Neutral/Bearish.

### Subtasks:
- [x] **4.1** Define data models using Pydantic for each pillar ✅ - Complexity: Medium
- [x] **4.2** Implement weighting & normalization logic ✅ - Complexity: Medium
- [x] **4.3** Implement confidence calculation with data quality downgrade ✅ - Complexity: Medium
- [x] **4.4** Provide rationale builder producing three-bullet explanation ✅ - Complexity: Low
- [x] **4.5** Unit tests covering edge cases & no-data scenarios ✅ - Complexity: Medium

**Dependencies:** Task 3
**Estimated Time:** 14 hours
**Files to Create/Modify:** `core/sentiment_engine.py`, `tests/test_sentiment_engine.py`

---

## Task 5: Telegram Bot Core (`bot/main.py`) - Complexity: Medium
**Description:** Implement webhook, command routing, address validation, and response formatting.

### Subtasks:
- [x] **5.1** Initialize Telegram Bot API webhook handler with `python-telegram-bot` ✅ - Complexity: Low
- [x] **5.2** Implement `/help` command with usage instructions ✅ - Complexity: Low
- [x] **5.3** Implement `/stats` command returning usage metrics ✅ - Complexity: Medium
- [x] **5.4** Implement contract address validation for EVM & Solana ✅ - Complexity: Medium
- [x] **5.5** Integrate Sentiment Engine to produce formatted reply (emoji, disclaimer) ✅ - Complexity: Medium

**Dependencies:** Tasks 3, 4
**Estimated Time:** 12 hours
**Files to Create/Modify:** `bot/main.py`, `core/validation.py`, `tests/test_bot.py`

---

## Task 6: Rate Limiting & Usage Metrics - Complexity: Medium
**Description:** Enforce 2 analyses per minute per user and track usage statistics.

### Subtasks:
- [x] **6.1** Implement in-memory rate-limit keys with sliding window algorithm ✅ - Complexity: Medium
- [x] **6.2** Add graceful error messaging when rate limit exceeded ✅ - Complexity: Low
- [x] **6.3** Store per-user & global usage counters for `/stats` ✅ - Complexity: Low

**Dependencies:** Tasks 2, 5
**Estimated Time:** 6 hours
**Files to Create/Modify:** `core/rate_limiter.py`, `bot/main.py`, `tests/test_rate_limit.py`

---

## Task 7: Testing Suite & QA Automation - Complexity: Medium
**Description:** Implement comprehensive unit, integration, and load tests, plus linting.

### Subtasks:
- [x] **7.1** Write unit tests for validation utilities and helper functions ✅ - Complexity: Low
- [x] **7.2** Write integration tests mocking external APIs (Twitter, Nansen, CoinGecko) ✅ - Complexity: Medium
- [x] **7.3** Configure load testing (Locust/Artillery) for 50 concurrent users ✅ - Complexity: Medium
- [x] **7.4** Configure coverage reporting in CI ✅ - Complexity: Low

**Dependencies:** Tasks 1-6
**Estimated Time:** 10 hours
**Files to Create/Modify:** `tests/*`, `.github/workflows/ci.yml`

---

## Task 8: Documentation & Developer Experience - Complexity: Low
**Description:** Provide user and developer documentation, code comments, and README updates.

### Subtasks:
- [x] **8.1** Update `README.md` with setup, usage, and deployment instructions ✅ - Complexity: Low
- [x] **8.2** Add inline docstrings and comments across modules ✅ - Complexity: Low
- [x] **8.3** Generate API reference (optional) via Sphinx or MkDocs ✅ - Complexity: Low

**Dependencies:** Tasks 1-7
**Estimated Time:** 4 hours
**Files to Create/Modify:** `README.md`, `docs/*`

---

## Task 9: Deployment & Monitoring - Complexity: Low
**Description:** Deploy to free hosting and set up basic monitoring.

### Subtasks:
- [x] **9.1** Deploy to Railway/Render free tier with environment variables ✅ - Complexity: Low
- [x] **9.2** Set up basic health checks and uptime monitoring ✅ - Complexity: Low
- [x] **9.3** Configure free monitoring tools (UptimeRobot, Sentry) ✅ - Complexity: Low

**Dependencies:** Tasks 2, 5, 6
**Estimated Time:** 4 hours
**Files to Create/Modify:** `DEPLOYMENT.md`, `README.md`

---

## Implementation Order
1. Task 1
2. Task 2
3. Task 3
4. Task 4
5. Task 5
6. Task 6
7. Task 7
8. Task 8
9. Task 9

## Total Estimated Time: 68 hours

## Notes
- Parallelize API calls within Sentiment Engine to meet <7s median response requirement
- Use in-memory caching for MVP to avoid infrastructure costs
- Weight percentages should be configurable via `config.yaml` for future tuning
- Include "Not financial advice" disclaimer in every user-visible response
- Handle missing pillar data by lowering confidence and flagging low data quality
- Secure API keys via environment variables
- Start with free hosting (Railway/Render) before scaling to paid infrastructure